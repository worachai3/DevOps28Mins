When install terraform, providers are not already installed so we have to install it seperately

terraform init

Set access_key_id, secret_key_id to Environment Variables

export AWS_ACCESS_KEY_ID=AAAAAAAAAAAAAAAAAAAAA
export AWS_SECRET_ACCESS_KEY=NNNNNNNNNNNNNNNNNNN

terraform {
  required_providers {
    aws = {
        source = "hashicorp/aws"
        version = "~> 5.9.0"
    }
  }
}

# Configure the AWS Provider
provider "aws" {
    region = "us-east-1"
}

# Plan - execute

resource "aws_s3_bucket" "my_s3_bucket" {                   #### my_s3__bucket is the name represent this bucket in terraform
  bucket = "my-s3-bucket-in28minutes-worachai-001"
}

After created tf file before execute we should run command plan first to see what this script will do

terraform plan

Then execute the file

terraform apply

## State
# Desired
Desired state are configured in tf

# Known
Result of previous execution and stored in tfstate

# Actual
State on cloud

When terraform apply are run terraform look at tfstate and compare with actual state this called refreshing state then compare with desired state

To store plan into file use command

terraform plan -out iam.tfplan

##########################################
Update only aws_iam_user.my_iam_user

terraform apply -target="aws_iam_user.my_iam_user"

#########################################
tfstate backup store previous state before apply change

If tfstate is lost terraform will not know what is the previous state and will not be able to compare with actual state

We should not commit tfstate to git because it contains sensitive information